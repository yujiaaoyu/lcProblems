class Solution {
    public int minMeetingRooms(int[][] intervals) {
    
    //sort the intervals by starting time 
    //so it will always find the earliest available meeting that end first
       Arrays.sort(intervals, (int[]a, int[]b)->(a[0]-b[0]));
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(intervals[0][1]);
        
        //keep track of the end time of each meeting and to check if there is any available room
        for(int i = 1; i<intervals.length; i++){
            if(intervals[i][0] >= pq.peek()){
                pq.poll();
            }
             pq.add(intervals[i][1]);
        }
        
        return pq.size();
    }
}


